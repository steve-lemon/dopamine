# run train for bubble agent (IQN9)
# - NOTE: customized for bubble w/ IQN
# - origin from `/notebooks/example/Run-Bubble-Train.IQN9.ipynb`
#
# [RUN TRAIN]
# $ python -um dopamine.discrete_domains.train --base_dir=/tmp/bubble_iqn9 --gin_files='bubble/iqn_bubble9.gin' --gin_bindings='RainbowAgent.tf_device="/cpu:*"'
#
# [RUN EVAL]
# $ python -m bubble.main --agent=bubble --level=25 --steps=500 --restore_checkpoint='/tmp/bubble_iqn8/checkpoints/tf_ckpt-545' --gin_files='bubble/bubble_iqn9.gin' --gin_bindings='RainbowAgent.tf_device="/cpu:*"'
#----------------------------------------------------------------------------------------------------

# Hyperparameters follow Dabney et al. (2018), but we modify as necessary to
# match those used in Rainbow (Hessel et al., 2018), to ensure apples-to-apples
# comparison.
import dopamine.agents.implicit_quantile.implicit_quantile_agent
import dopamine.agents.rainbow.rainbow_agent
import dopamine.discrete_domains.atari_lib
import dopamine.discrete_domains.run_experiment
import dopamine.replay_memory.prioritized_replay_buffer
import gin.tf.external_configurables

# agent for bubble
import bubble.retro_lib
import bubble.bubble_agent
import bubble.bubble_runner
retro_lib.create_retro_environment.game_name = 'BubbleBobble'
retro_lib.create_retro_environment.level = 1
Runner.create_environment_fn = @retro_lib.create_retro_environment
create_agent.agent_name = 'implicit_quantile'
RetroPreprocessing.wall_offset = 0          # use 200 if activate
# RetroPreprocessing.step_penalty = -0.0001  # every step penalty
RetroPreprocessing.step_penalty = 0.0005    # every step penalty (survival is better since 200623/443)
RetroPreprocessing.reset_fire = 0
RetroPreprocessing.score_bonus = 0.02       # bonus reward if got new-score.

ImplicitQuantileAgent.kappa = 1.0
ImplicitQuantileAgent.num_tau_samples = 64
ImplicitQuantileAgent.num_tau_prime_samples = 64
ImplicitQuantileAgent.num_quantile_samples = 32
# ImplicitQuantileAgent.double_dqn = True
RainbowAgent.gamma = 0.99
RainbowAgent.update_horizon = 3
RainbowAgent.min_replay_history = 20000 # agent steps
RainbowAgent.update_period = 4
RainbowAgent.target_update_period = 8000 # agent steps

RainbowAgent.epsilon_train = 0.001
RainbowAgent.epsilon_eval = 0.001
RainbowAgent.epsilon_decay_period = 200000  # agent steps (1 at step=1 => 0.001 at step=200000)

# IQN currently does not support prioritized replay.
RainbowAgent.replay_scheme = 'uniform'
RainbowAgent.tf_device = '/gpu:0'  # '/cpu:*' use for non-GPU version
RainbowAgent.optimizer = @tf.train.AdamOptimizer()

tf.train.AdamOptimizer.learning_rate = 0.00005
tf.train.AdamOptimizer.epsilon = 0.0003125

Runner.num_iterations = 600
Runner.training_steps = 200000             # origin 250000
Runner.evaluation_steps = 0
Runner.max_steps_per_episode = 20000       # origin 27000

WrappedPrioritizedReplayBuffer.replay_capacity = 1000000
WrappedPrioritizedReplayBuffer.batch_size = 32
